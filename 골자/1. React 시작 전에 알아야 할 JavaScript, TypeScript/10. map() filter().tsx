 // 오늘은 반복에 대해서 배워보도록 하겠습니다.
 // 사람이 컴퓨터를 쓰는 가장 큰 이유 중 하나는, 
 // 귀찮은 반복작업을 빠르게 처리하기 때문
 // 반복을 쓰기 위해서 javascript 에선 map, filter, reduce를 사용하는데,
 // 우린 reduce는 난이도때문에 제외하고,
 // map 과 filter를 통해 반복을 구현해보겠다.
 // (다음)
 // 먼저, 반복에 쓰이는 map, filter, reduce 는 모두 콜백함수다.
 // 콜백함수란, 함수 안에 ‘들어와서’ call 되는 함수
// 함수 안에 있는 함수
// 콜백함수의 작동이 끝나야만, 바깥에 있는 함수가 처리됨
// 뭔말인지 모르겠고, 코드를 통해 살펴봅시다
// (코드)
const students = ['조교행님', '지연', '혁주', '민지', '준수'];

const newStudents = students.map(student => `${student} 최고`);

console.log(newStudents);

// student('조교행님')  	 	    '조교행님 최고'
// student('지연') 	 	    	    '지연 최고'
// student('혁주')		return 	    '혁주 최고'
// student('민지')	 			    '민지 최고'
// student('은혁')	 			    '은혁 최고'

// 실행결과. 컨트롤 엔터.

// 이론적인걸 생각하기 전에, 간단히만 생각해보죠
// 배열에 map함수를 사용했더니, 새로운 배열 newStudents 가 나왔네요
// 맵은 내장객체 array의 함수입니다. 
// map 안에 파라미터로 뭐가 들어가나? 함수가 들어간다.
// 즉, 콜백함수가 들어갔네요
// 그리고 단수로 쓰인 student 도 사실 함수에요
// 보통 단수복수구분할때 코딩하면서 s를 붙이고 안붙이고 식으로 많이 씁니다.
// 단수 스튜던트 함수는 파라미터로 배열 각각의 요소를 받을겁니다
// 조교행님, 지연, 혁주, 민지, 준수
// 그리고 맵은 student라는 콜백함수를 배열 각각의 요소마다 실행시킵니다.
// 조교행님 한번, 지연 한번, 혁주 한번, 민지 한번, 준수 한번
// 그리고 이 결과들로 새 배열을 만들어서 리턴합니다. 새 배열의 내용이 우리의 결과
// 뒤에 최고가 붙은것들이죠. 그걸 뉴 스튜던트로 받은 것.

// 맵 함수를 세세히 분석할필요는 없고, 하나만 정확히 알면,
// 배열의 요소 하나하나를 반복해서, 새 배열을 만들어 리턴합니다.
// 이게 맵 함수의 핵심입니다.

const students = ['조교행님', '지연', '혁주', '민지', '준수'];

const newStudents = students.filter(student => student.length > 2);

console.log(newStudents);

// student('조교행님') 	 '조교행님'.length > 2	     true
// student('지연') 	 	'지연'.length > 2		    false
// student('혁주')		'혁주'.length > 2		    false
// student('민지')	 	'민지'.length > 2		    false
// student('은혁')	 	'은혁'.length > 2		    false

//return ['조교행님']

// 다음은 필터입니다. 우리가 흔히 말하는 필터는 뭔가를 걸러내는 도구다.
// 학생 이름 배열에서 이름이 긴 사람인 '조교행님' 만 걸러내보겠다
// 컨트롤 엔터
// 이번엔 다섯개가 아니라 하나만 만들어졌습니다.
// 아까랑 비슷한데, 함수의 리턴값에 조건이 들어갔죠?
// 길이가 2 초과여야한다는 뜻입니다.
// 반복을 하면서 이 조건을 일일히 검사한 후,
// 조건에 맞는 것으로 새 배열을 만듭니다

// 오늘 한 것은 map 과 filter 인데, 더 강력한 반복기법을 사용하고싶으신 분들은
// reduce 를 배워보시기 바래요.

// ppt
// 핵심정리
// 콜백함수(callback function)는 함수 안에 ‘들어와서’ call 되는 함수이며, 함수 안에 있는 함수이다. 
// 콜백함수는 안에 있는 함수의 작동이 끝나야만 바깥에 있는 함수가 처리된다.
// map() 과 filter() 는 parameter로 콜백함수를 받는다.
// map() 은 배열을 반복해 새 배열로 바꿔서 return 한다.
// filter() 는 배열을 반복해 조건에 맞는것만 걸러낸 후, 새 배열을 만들어 return 한다.