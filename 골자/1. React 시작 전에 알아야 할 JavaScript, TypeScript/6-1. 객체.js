// javascript 에선 다른 메이저언어들, c, c++, c#, java, python과는
// 아주 크게 다른 두 가지 개념이 있다.
// 객체(object) 와, 함수(function) 이다.
// 그래서 혹시 미리 다른 언어를 공부해본 사람들은
// 머릿속에 든 걸 잊어버리고 새로운 마음으로 들었으면 좋겠다.
// JavaScript 개발자는 객체와 함수를 아주 잘 다뤄야 한다.
// 이해 안되면 다시 시청하고, 알때까지 코드로 연습해보자.

// (실습)
const myInfo = [
	'조교행님',
	28,
	true,
	[
		'아빠',
		'엄마',
		'멍멍이'
	],
];
// 객체(object)란 뭘까?
// 내 개인정보를 배열로 저장했다 치자.
// 배열의 데이터는 위와 같이 모두 동일할 필요는 없다.

// 뭐가 뭔지 구분 가능한가? 
// 조교행님은 이름일 것
// 28은 나이, true는 뭔지 모르겠고,
// 배열은 가족으로 보임.

// 이건 두가지 점에서 상당히 불편함
// 첫번째, 데이터가 뭘 의미하는지 어림짐작해야됨.
// true 는 대체 뭘 의미하는걸까?
// 두번째, 데이터에 접근할 일 있을 때 인덱스를 일일히 기억해야
// 예를 들면 이름에 접근하는 경우, 
const myInfo = [
	'조교행님',
	28,
	true,
	[
		'아빠',
		'엄마',
		'멍멍이'
	],
];
console.log(myInfo[0]);
// 인덱스 0은 이름이라는걸 기억하고 있어야.

// (ppt)
// 키(key)와 값(value)으로 이루어진 프로퍼티(property)의 모음
// 중괄호 { } 로 프로퍼티들을 묶는다
// (네이버 사전) object
// 물건, 물체라는 뜻. '어떤 것'이다. 더 쉬운 영어로는 썸띵, 스터프
// 한국어로 머리털나고 처음듣는 '객체'라는 단어로 쓰여서 감이 잘 안옴

// (실습)
const myInfo = {       // 배열(array)은 대괄호, 객체(object)는 중괄호
	name: '조교행님',   // key는 name이고, 값(value)은 조교행님, 둘을 합쳐서 프로퍼티(property)
	age: 28,
	isGirlFriend: true,
	familyMembers: [
		'아빠',
		'엄마',
		'멍멍이'
	],
	techStack: {
		frontend: 'React',
		backend: 'GraphQL',
		database: 'SQLite'
	}
};

// 정의만 읽어선 무슨 말인지 감이 잘 안오니, 직접 확인해보자.
// 나에 대한 객체를 하나 만들었다. 아까에 비해서 뭐가 달라졌나?
// 각각의 데이터에 키(key) 가 있다. 

// 28이라는 값, 영어로 하면 value는 키가 없을때 뭔지 몰랐는데 나이였고,
// true는 여자친구의 유무를 뜻하는 isGirlFriend 의 value 였다.

// 이처럼, 이름을 달아두니깐 내 정보에 대해 훨씬 이해하기 쉬워짐

// 객체에 대해 좀 더 자세히 알아보자.
// 배열은 대괄호 [ ] , 객체는 중괄호 사용
// 키는 영문으로만 쓰며, 키는 스트링 쓸때처럼 따옴표 안씀

// 키와 밸류를 묶어서 하나의 프로퍼티라고 한다

// 주석 보면 키는 네임이고 값 밸류는 조교행님. 둘을 합쳐서 프로퍼티라고 
// 한국어로는 속성이라고 하는데, 그냥 프로퍼티라고 알아두자.
// 객체는 딱 봐도 배열보다 훨씬 읽기 쉽다.
// 뭐가 뭔지 구분이 딱 됨

// 그럼 우린 앞으로 배열을 버리고 객체를 써야될까?
// 그건 아니다. 개발자는 상황에 따라 알맞은 자료형을 맞춰서 써야
// 여러개의 프로퍼티는 세미콜론이 아니라 콤마로 구분

// 여러분들이 익숙해질때까진 세미콜론을 붙이는 실수를 엄청 할 것
// 그리고 콤마 빼먹어서 생기는 에러도 생각보다 엄청 많아요
// 타입스크립트의 좋은점이, 콤마가 빠졌으면 빠졌다고 말해준다는것
// 에러창 보여줌
// 자바스크립트는 말 안해줌.

// 어떤 자료형이든 value 로 모두 허용됨.

// 코드 보면 스트링, 넘버, 불리언, 어레이, 오브젝트 다 있음

// 배열안에 배열처럼, 객체안에 객체를 또 쓸 수 있음.

// 심지어 나중에 배울 함수도 타입이기때문에 value가 될 수 있음

// 이제 데이터에 접근해보자.
// 배열에 접근할 땐 인덱스를 사용했는데, 객체는 인덱스가 없어요
// 즉, 배열처럼 순서가 없다는 의미.
// 그래서, 인덱스가 아니라 마침표를 사용할거에요.
console.log(myInfo.name);
// 마침표 뒤에 프로퍼티의 키를 써주면 됩니다

// 우리가 맨날 썼던 이 콘솔로그도 자세히 보면 마침표 있음

// 그것은, console 이라는 '객체' 안에 있는 log 함수 라는 뜻입니다.

// 당연히, 잘못된 키를 타이핑하면 undefined 가 나옵니다.
// name을 nam 이라고 e 하나 빼보면 undefined라고 나옴
// 타입스크립트가 좋은게, 친절히 에러가 났다고 알려줌

// 에러 눌러보면, 디쥬 민 네임? 이런식으로
// 혹시 니가 말한게 네임 아니었음? 하고 알려줘요

// 자바스크립트는 이런게 없어요. 심지어 이걸 에러로 취급하지 않아요

// (크롬켜서 개발자도구콘솔)
// 이건 개발자도구라는건데, f12누르면 튀어나오구요
// 브라우저는 기본적으로 javascript 를 알아듣는다고 했죠?
// 그래서 코드 죽 긁어서 붙여넣고 엔터치면
// 에러가 나왔나요? 안나왔어요. 자바스크립트한테는 에러가 아니라는 뜻
// 타입스크립트는 이렇게, 여러분이 실수할때마다 지적을 더 잘해줄 것

// (다시 실습창)
// 객체의 프로퍼티는 const로 선언되었더라도 바꿀 수 있음
// 배열도 마찬가지였죠?
// (아래 코드는 자동완성을 보여주기위해 직접 쳐보자.)
myInfo.techStack.frontend = 'Vue.js';
// 무슨뜻이냐, myInfo 객체의, 
//techStack 객체의, 
// frontend에 접근해서 거기에 뭘 집어넣는다?
// vue.js 를 집어넣는다!
// 그래서 myInfo를 콘솔로그로 찍어보면
// 결과가 바뀐것을 볼 수 있어요.
// 그러나 배열과 마찬가지로, 객체 자체를 바꾸진 못해요

const myInfo = {       // 배열(array)은 대괄호, 객체(object)는 중괄호
	name: '조교행님',   // key는 name이고, 값(value)은 조교행님, 둘을 합쳐서 프로퍼티(property)
	age: 28,
	isGirlFriend: true,
	familyMembers: [
		'아빠',
		'엄마',
		'멍멍이'
	],
	techStack: {
		frontend: 'React',
		backend: 'GraphQL',
		database: 'SQLite'
	}
};
myInfo = {
    name: 'Tom',
    age: 22
}

// 에러 읽어보면, const 로 선언되었기때문에 집어넣을 수 없다고 나옴

// (ppt)
// 객체는 키(key)와 값(value)으로 이루어진 프로퍼티(property)의 집합이며, 
중괄호 { } 로 프로퍼티들을 묶는다.
// 프로퍼티는 콤마( , )로 구분한다.
// 객체는 순서가 없다. 데이터에 접근할때는 인덱스가 아닌, 마침표( . )를 사용한다.
// 객체의 프로퍼티는 const로 선언되었더라도 바꿀 수 있으나, 객체 자체를 바꾸진 못한다.