// 함수(function)에 대해 배워보겠습니다.
// 함수부터 TypeScript 문법이 나올겁니다.
// with TS 라고 적혀있죠? JavaScript는 줄여서 JS,
// TypeScript는 TS 라고 줄여서 말해요

// 자바스크립트에서의 함수의 세계는 다른 메이져 언어들
// C, C++, C#, Java, Python하고는 많이 달라요
// 만약 어떤 친구가 Java랑 JavaScript 하고 똑같은거아니야?
// 그렇게 말하면 인도와 인도네시아만큼이나 다르다고 설명해주세요
// 둘은 쓰는 방식이 완전히 다른 언어에요. 다른놈이에요
// 특히 자바에서 객체와 함수는, 
// 자바스크립트의 객체와 함수와 완전히 달라요
// 함수, 바로 시작하도록 하겠습니다.

// (다음장)
// 수학에서의 함수와 프로그래밍의 함수는 다른 놈입니다!
// 프로그래밍에서의 함수는
// 기능을 가진
// 재사용 가능한
// 도구 입니다.
// 이걸 수학적인 방법으로 설명하려니깐 훨씬 어려운거에요
// 나는 개인적으로, function 이라는 
// 단어를 한국 학자들이 처음 봤을때
// 이건 함수구나 하고 잘못된 번역을 해버린 
// 대표적인 사례라고 생각해요

// (네이버 사전)
// 펑션, 쳐보면 뭐가 맨 처음 나옵니까?
// 기능입니다 기능.
// 이렇게 부르기 싫으면 
// 차라리 펑션이라고 한국어로 쓰는게 훨씬 나았어요
// 근데 국내 프로그래밍 관련 자료는 전부다 함수라고 부르는데
// 나 혼자 펑션이라고 부를수는 없잖아요? 
// 아무튼, 다시 강조합니다. 
// 수학에서의 함수와 프로그래밍의 함수는 다른 놈입니다.

// (코드)

console.log(`
    안녕, 조교행님. 나이는 28세
    안녕, 은지. 나이는 16세
    안녕, 현수. 나이는 21세
    안녕, 지원. 나이는 14세
    안녕, 준수. 나이는 23세
`);

// 여기서 공통된건 무엇이 있나요?
// 안녕이 앞에 들어가고, 뒤에 이름 나이가 오네요
// 근데 내가 안녕 대신 하이를 쓰고싶으면
// 또는 나이 대신 연세를 쓰고 싶다면
// 나는 저 다섯개의 문장을 전부다 바꿔줘야되겠죠?

// 이런 문장이 몇백개되면, 정말 귀찮을것

// 함수가 뭔지 모르지만, 
// 이름과 나이를 받아서 
// 내가 무슨 이름과 나이를 주든 잘 출력되는
// 함수를 하나 작성해보겠다.
function sayHello(name: string, age: number) {
    return `안녕, ${name}. 나이는 ${age}세`;
}

const result = sayHello('조교행님', 28);

console.log(result);

// 컨트롤 엔터
// 안녕 조교행님 나이는 28세
// 이제 이 함수를 분석해보면서 함수가 뭔지 알아볼게요
// 어려울 수 있으니깐 집중해서 들어주세요
// 이해안되면 멈추고 뒤로가서 다시 들어보세요

// (ppt)
// 노란색박스가 두개
// 첫번째 노란색박스, 우리가 배우고자 하는 함수
// 이걸 함수선언문이라고 해요
// 두번째 노란색박스, 호출하는 코드. 영어로 호출은 call 이라고 함
// 함수를 쓰고싶으면 이렇게 호출해야합니다.
// 호출하는 코드에 쓰이는 소괄호는 함수를 실행한다는 의미
// 첫번째 노란색박스는 function 이라는 키워드로 시작.
// 나중에, 지금보다 훨씬 많이 쓰는 방식인 화살표함수 배우기 전까진
// 함수는 펑션키워드를 맨 앞에 쓰고 선언한다고 알아둡시다
// 펑션 다음에 오는거, 함수 이름입니다. 함수이름뭡니까?
// sayHello
// 함수 이름은 이렇게, 영어단어 동사와 명사의 결합으로 짓습니다.
// 세이 헬로, 쇼 메세지, 이런식으로 동사와 명사 결합
// 함수 선언문 뒤에 소괄호는 호출할때 쓰는 소괄호하고 의미가 다릅니다
// 이 안에 다음 이미지에서 설명할 매개변수를 담습니다.
// 소괄호 뒤에 중괄호로 함수의 내용이 들어갑니다.

// (다음)
// 호출 코드에서 소괄호 안에 콤마로 구분되었던 조교행님과 28은
// 이제 sayHello 함수로 전달될겁니다.
// 그 안에서 다음과 같은 일이 일어나요
// 조교행님은, name이라는, string형 변수가 된다.
// 28은, age라는, number형 변수가 된다.
// name과 age는 함수 바깥으로 벗어나면 사용할 수 없어요
// 딱 이 함수 안에서만 쓰는거에요

// 여기서 string, number 라는 타입은, 타입스크립트 문법입니다.
// 최초로 나왔습니다. 타입스크립트 문법입니다.
// 함수 안에 들어가는 놈의 타입을, 여기 선언문에서 지정해줘야됩니다.
// 필수에요.
// 무슨말이냐면, name엔 다른타입 받지 않고, string 타입만 받겠다.
// age는 다른타입 받지않고 number타입만 받겠다는거에요
// 다른 타입을 넣으면 에러납니다.

// 그리고 타입스크립트에서는, 다시 말합니다. 자바스크립트아니고
// 타입스크립트에서는, 주는쪽에서 두개 집어넣었으면
// 받는쪽에서도 딱 두개만 받아야되요

// 주는쪽인 호출문에 쓰인 조교행님과 28은 인자(아규먼트) 라고 합니다
// 실 매개변수라고도 합니다. 안자, 아규먼트
// 받는쪽인 sayHello 함수의 선언문에서 소괄호 안에 쓰인
// 네임과 에이지는 매개변수라고 합니다. 파라미터라고도 하고,
// 형식매개변수라고도 합니다. 매개변수, 파라미터
// 용어들을 엄청나게 설명했는데, 스트레스 받을 필요 없어요
// 개발자들도 파라미터 아규먼트 인자 매개변수 실매개변수 형식매개변수
// 그 차이 잘 모르고 그냥 파라미터라고 퉁쳐서 부르기도해요
// 그래서 다른건 몰라도, 파라미터라는 단어는 알고갑시다
// 단어 외우는것보다 중요한건, 핵심은, 
// 호출 시에, 소괄호 안에 있는 값이 어디로갔어요?
// 함수의 소괄호속으로 전달되었다는겁니다. 중요해요

// (다음)
// 네임과 에이지는 함수 sayHello의 변수가 되었기 때문에,
// 세이헬로 안에서 자유롭게 쓸 수 있습니다. 
// 세이헬로 바깥에선 네임과 에이지는 존재하지 않아요

// (다음)
// 이제 세이헬로 함수 안에서, 바깥으로 내보낼거에요.
// 옆에 보면 리턴이라고 써져있죠? 한국어로는 반환입니다.
// 세이헬로 함수가 내뱉는 결과입니다.
// 세이헬로의 결과, 리턴값을 뭘로 받았어요? 
// result 라는 변수로 받았어요
// 여기서 result 타입은 뭡니까? 
// string입니다.
// 최종적인 결과는 뭐에요? 안녕 조교행님, 나이는 이십팔세가 됩니다.

// (다음)
// 처음으로 돌아가서, 결과만 생각해봅시다
// 세이헬로 함수 호출부에 두개의 인자, 아규먼트인
// 조교행님과 28을 집어넣어 나온 리턴값은 뭡니까?
// 안녕 조교행님 나이는 28세.
// 제가 일부러 선언부분 지워버렸어요. 아예 잠시 생각하지 말라는거에요
// 원인과 결과만 생각하는거에요
// 함수에 뭔가를 집어넣었더니, 뭔가가 나왔다.
// 함수내용은 생각하지말고 이것만 생각하자는거에요
// 함수 장 처음 시작할때 뭐라고 말했습니까?
// 함수는, 기능을가진, 도구다
// 이 함수의 기능은 뭡니까?
// 이름과 나이를 집어넣으면,
// 이름과 나이가 들어간 스트링타입의 문장이 나왔다.
// 이것이 세이헬로 함수의 기능입니다.
// 그걸 우리가 저 파란색 박스안에서 직접 코드로 써본거에요
// 전자렌지가 어떻게 생겼는지 꼭 알아야씁니까?
// 전자렌지의 회로를 전부다 알아야되요?
// 아니죠. 전자렌지의 기능을 알면 전자렌지를 쓸 수 있습니다.
// 콘솔로그 어떻게 생겼는지 아는사람 있나요? 저도 몰라요
// 근데 콘솔로그는 함수입니다. 뭔가 집어넣으면 콘솔에 출력해주는게
// 콘솔로그의 기능이거든요.
// 알겠죠? 함수는 기능을가진 도구입니다.

// (다음)
// 이제 비디오 잠깐 멈추고, 이거 보면서,
// 제대로 이해했는지 다시 확인해주세요
// 함수, 처음배울때 정말 어렵습니다.
// 저도 학교다닐때 잘 이해 못했어요
// 근데 우린 남이 만든 수많은 함수들을 써볼거에요
// 우리가 직접 함수들을 만들어볼거에요
// 그러니깐, 잠깐 멈추고, 이제까지, 설명했던거 제대로이해했는지 다시 분석해보세요

// (오초세고 )
// 이제 완벽히 이해했나요?
// 계속해서, 함수를 어떻게 재사용하는지에 대해서 알아보죠.

// (실습)
// 코드를 바꿔봤습니다.
// 다섯줄 모두 이름과 나이를 바꿔서 각각의 변수로 만들었어요
// 제가 함수를 여러번 만들었습니까? 아니죠 딱 한번 만들었죠
// 변수 에이부터 이까지 만들어서 재사용했죠
// 이처럼, 함수는 기능을 가진, 재사용 가능한, 도구입니다.
// 이제 맨 처음 문제를 해결해보자.
// 안녕을 하이로, 나이를 연세로 바꾸려면 뭐만 바꾸면 되요?
// 함수만 바꿔주면 되겠죠
// 안녕을 하이로, 나이를 연세로
// 결과는, 짜잔 수정되었네요

// 문장이 다섯개든 백개든 일일히 바꿔줄 필요가 없다는 겁니다. 
// 피피티
// 핵심정리
// 수학적 함수와 프로그래밍의 함수는 다른 단어
// 프로그래밍의 함수: ‘기능’을 가진, ‘재사용’가능한 ‘도구’
// 함수는 미리 만들어놨다가 필요할 때 호출해서 사용 
// 함수 이름은 동사+명사 로 짓는다
// 사용자는 인자(argument)를 입력해 함수로 보냄 
// 함수 사용자는 함수 사용법만 알고 있으면 되며, 내부 코드는 알 필요가 없음
// TypeScript에선, 함수의 parameter 타입을 지정해야함

// 이제 함수가 뭔지는 알았습니다. 함수에 대해 꼭 알아야될 내용들을
// 좀더 알아보도록 하죠
