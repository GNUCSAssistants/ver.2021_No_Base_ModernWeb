// 이 수업을 시작하기 전에, 반드시 JavaScript, TypeScript 기초를 알고 
// 시작하길 바랍니다 
// 《ver.2021 노베이스 모던 웹개발》 첫번째 강좌인 
// 『React 시작 전에 알아야 할 JavaScript, TypeScript』가 준비되어 있습니다

// 다음

// 안녕하세요 조교행님입니다.
// 지루한 언어강의 듣느라 고생 많았습니다
// 이제 콘솔화면을 떠나서, 진짜 화면을 만들어보는 시간을 가질 겁니다.
// 타입스크립트만 가지고 웹앱을 만들수도 있습니다.
// 그러나 무지 어려워요
// 그래서, 유능한 개발자들이 만들어놓은 여러가지 '도구'들을 사용해볼겁니다.
// 그 도구 중 하나가 바로 리액트입니다.
// 그 중에서 2019년에 적용된 컴포넌트 만드는 방식인 hook 을 사용해볼거에요
// 이 강의에선, 리액트에 대해 많은 것을 다루지 않습니다.
// 당장 우리가 화면 만드는 세계로 뛰어들만큼만 알아보고, 다음 강의인 CSS 로 넘어갈게요

// 다음

// 리액트는 프론트엔드 라이브러리 입니다. 둘 다 무슨말인지 모르겠으니깐
// 단어부터 알고갈게요.
// 프론트엔드: 더 정확한 말로는 클라이언트라고 합니다. 클라이언트는 사용자라는 뜻
// 사용자가 앱을 사용할 때 눈에 보이는 화면을 말해요. 그게 바로 뭡니까?
// 브라우저죠. 크롬, 파이어폭스, 사파리, 웨일, 엣지, 익스플로러 는 ~ 제발 사라졌으면
// 좋겠어요
// 리액트는 프론트엔드, 즉 클라이언트 개발할 때 쓰는 겁니다.
// 반댓말로 백엔드라는게 있는데 정확한 말로는 서버를 말하는 거에요
// 눈에 보이진 않지만, 앱이 작동하기 위해 꼭 필요한 부분
// 그럼 프론트엔드와 백엔드는 알겠고, 라이브러리는 대체 뭐지?

// 다음

// 라이브러리는 주방 도구입니다.
// 라면 하나 끓이려고 냄비, 국자, 튀김젓가락, 집게까지 만들진 않죠
// 라이브러리는 미리 작성해놓은 코드 모음이에요.
// 내가 쓰고싶은 코드는 사실 구글링해보면 다 있어요.
// 수많은 선배개발자들이 여러분이 마주치는 문제 정도는 이미 직접 경험했고
// 미리 그 해결책을 만들어두어서 공짜로 인터넷에 올리고있어요
// 우리가 배워볼 리액트는 스스로 라이브러리라고 광고하는데 저는~~~ 동의하진 않아요

// 프레임워크는 식당 주방이라고 생각하면 됩니다.
// 라이브러리의 좀 더 쎈 표현이에요
// 왜? 규칙이 부여된 공간이에요
// 우리가 설거지하고 바닥에 내팽개치거나, 가스렌지 위에 올라가서 감자깎진 않잖아요
// 왜? 주방엔 규칙이 있으니깐
// 설거지하는곳, 재료 다듬는 곳, 익히는 곳이 분리되어있고,
// 직원별로 해야할 일 정해져있고
// 혼자 멋대로 행동하면 셰프한테 쫒겨나죠.
// 왜 그래요? 수천년동안 음식만들다보니깐 이렇게 정해진 '틀'이 있으면
// 일하기 되게 편리하다는거에요
// 인터넷이 등장하고 사람들이 웹을 상업적으로 쓰기 시작하면서
// 자기들이 수많은 시행착오를 겪어서 발전했겠죠? 프레임워크는 주방처럼, 
// 하나의 시스템입니다. 그 시스템대로만 잘 따라서 움직이면
// 괜찮은 요리 하나 만들 수 있어요
// 제가 생각하는 리액트는, 프레임워크에요. 하나의 시스템입니다

// 또 여러분들이 개발하다보면 API라는 걸 들어보게 될건데,
// 이건 가스렌지 손잡이같은 거에요. 손잡이 돌리면 어떻게돼요?
// 불이 켜지죠? 손잡이와 화로 사이에 어떤 장치가 있어서
// 돌리면~ 불이 켜집니다.
// 당연하게도 손잡이하고 화로 사이에 아무것도 없으면
// 마법을 부리지 않는 이상 불은 켜지지 않아요.
// API는 두 프로그램이 서로 통신할 수 있도록 하는 중개자입니다.

// 이 세개에 대해 간단하게 예를 들어 설명을 했는데,
// 사실 개발자들도 정확하게 몰라서 서로 이게 라이브러리인지 프레임워크인지 API인지
// 묻기도 해요. 저도 이 강의자료 만든다고 정확한 정의를 찾아봤어요
// 이걸 설명하긴 했지만, 정의 자체를 정확하게 외우려고 하지 마세요
// 핵심은 뭡니까? 파란색으로 색깔 칠해놨죠?
// 미리 만들어놓은, 우리보다 똑똑한 사람들이
// 미리 만들어놓은, 어떤 것들이라는 겁니다.
// 리액트도 미리 만들어놓은 시스템이에요

// 다음

// 미리 만들어놓은 코드를 돈내고 써야할까요? 
// 우리가 윈도우나, 한글, 포토샵같은거 쓰려면
// 돈 내고 써야되잖아요
// 하지만 리액트는 공짜입니다. 소스코드도 공개되어 있어요
// 코드도 공개해버리고, 아예 사용료도 받지 않고 공짜로 풀어버리는걸
// 오픈소스라고 합니다. 리액트도 오픈소스에
// 개발자들이 이렇게 돈 욕심이 없기 때문에
// 우리가 마음놓고 개발공부를 할 수 있는 겁니다.

// 결론적으로 리액트는 뭐다? 프론트엔드, 즉 클라이언트에서 쓰는,
// 미리 만들어진 시스템입니다.

// 근데 왜 하필 리액트일까? 경쟁기술이 없을까요?
// 있어요. 지금 가장 큰 경쟁자는 아마 스벨트가 아닐까 싶고요
// Vue.js 도 얼마전에 버전 쓰리가 나왔구요
// 순수하게 자바스크립트, 타입스크립트만으로 개발도 가능하구요
// 근데 왜 하필 리액트인가
// 다음 네가지 이유가 있어요
// 시장 점유율이 매우 높습니다. 업계 표준이라고 말해도 동의하지 않을 사람 없을거에요
// 경쟁자 Vue.js, 스벨트에 비해서 월등합니다
// 신규프로젝트는 대부분 리액트로 만든다고 보시면 될 것 같아요
// 그리고 대기업인 페이스북이 만들었고 직접 관리합니다.
// 우리가 타입스크립트, 왜 배웠죠? 마이크로소프트라는 든든한 대기업이
// 만들었고, 관리하니까요
// 시장에서 대기업이 직접 관리한다는건 대단한 강점입니다
// 앱을 컴포넌트로 나누어 개발한다. 사실 이건 구식기술인 제이쿼리 이후엔 
// 다른 기술들도 마찬가지여서 리액트만의 독자적인 장점이라 보긴 힘들거같구요
// HOOK을 사용한다
// 2019년에 나온 기술인데, 이것때문에 리액트 진입장벽이 확 낮아졌어요
// 만약 HOOK이 없었으면 여러분들한테 입문용으로 리액트를 소개하진 않았을거에요
// 그리고 Apollo 라고, 나중에 배울 그래프큐엘 라이브러리가 있는데
// 아폴로 공식 튜토리얼은 리액트로 쓰여져 있습니다. 왜? 업계 표준이니깐

// 다음

// 개발환경 세팅은 따로 하지 않습니다. 대신 코드 샌드박스라는 사이트를
// 이용해서 리액트를 익혀보도록 하겠습니다.
// 왜 이게 좋냐면, 타입스크립트와 마찬가지로 여러분의 컴퓨터가 윈도우든 맥이든
// 우분투든 민트든 크롬브라우저만 깔려있으면 언제든지 실습을 진행할 수 있기
// 때문이에요
// 참고로 샌드박스는 사전 찾아보면 어린이들이 장난치는 모래놀이통을 의미합니다
// 외부 환경과는 격리된, 우리의 코드를 테스트하는 공간이라고 보시면 되요

// 실습

// 저는 코드 샌드박스 메인화면에 들어왔구요, 깃허브 아이디가 있으면 깃허브로,
// 구글 아이디가 있으면 구글로 가입해주시고 메인화면으로 넘어오면 됩니다
// 메인화면에서 뉴 샌드박스 한번 클릭해볼게요
// 원하는 환경을 선택할 수 있어요. 우리가 찾는 건 리액트인데,
// 타입스크립트를 쓸 것이기 때문에, 리액트 타입스크립트를 선택하겠습니다.
// 나중에, 여러분들이 postgres 그리고 postgraphile 까지 배우고나서
// 아폴로 클라이언트 라이브러리를 배워볼건데
// 그때는 직접 vscode 깔아서 개발환경을 세팅해볼거거든요?
// create-react-app 이라는 명령 칠 때도 타입스크립트를 설정해줄겁니다
// 확장자가 tsx로 나올거에요
// 너무 어려운 얘기만 했다, 바로바로 넘어갈게요
// 눌러서 실행시켜보면 조금 시간이 지난 다음에,
// 다음과 같이, 당장 리액트를 시작할 수 있는 환경이 구축되었습니다.
// 헬로우가 잘 찍혔죠? 글자 바꿔볼게요
// 안녕, 조교행님
// 배워보자 리액트!
// 그러면 글자 바뀌는걸 자동 감지해서 화면에 띄워줍니다.
// 컨트롤 에스 누르면 저장이 되어서, 브라우저 껐다가 다시 코드 샌드박스 가도
// 저장된 부분부터 실습할 수 있습니다.
// 그리고 신기한거 하나 더 설명드리자면, 지금 당장 휴대폰 켜보세요
// 여기 보면 url 있죠? 이거 그대로 쳐보세요
// 화면에 여러분들의 코드가 뜰겁니다.
// 컨트롤 에스 누르고, 모바일 화면 새로고침 하면 바뀐게 반영될거에요
// 우리 프로젝트 이름도 정해볼까요?
// 샌드박스 인포로 가서,
// 제목과 설명을 적어봅시다

// 마지막으로 리액트 버전 한번 볼까요? 00.00.00 라고 뜨네요
// 타입스크립트 강의때도 버전을 읽었는데,
// 버전이 왜 중요한지, 버전에 대한 설명만 하고, 오티 마치겠습니다.

// ppt

// 일반인들은 버전이 높으면 높을수록 좋은 줄 알아요. 윈도우 일레븐이 나온다는
// 얘기가 있는데, 윈도우 10보다 좋을거라는건 기대하잖아요?
// 근데, 개발자들은 버전이 올라가면 긴장해야 됩니다
// 물론 좋아지니깐 버전이 올라가는것일텐데, 긴장해야되요. 함부로 업그레이드 안합니다
// 지금 리액트 버전이 00.00.00인데, 이 맨 앞자리 두개 숫자가 업그레이드되면
// 제가 가르치는 지식이 옛날지식이라서 코드가 작동하지 않을수도 있어요
// 즉, 리액트 17과 18은 다른 기술이라고 생각해야됩니다.
// 버전업 하고싶으면 뭐가 바뀌었는지 공부하고 버전업해야되요

// 다음

// 두번째 숫자는 새 기능 추가를 말합니다. 업그레이드해도 여러분의 코드는
// 정상작동할거에요. 신기능은 써도 되고 안 써도 됩니다

// 다음

// 세번째 숫자는 버그 수정을 말합니다. 우리 입장에선 매우 좋은 버전업이라고
// 할 수 있어요

// 다음

// 추가로, 이 둘 중에 더 높은 버전은 위에 있는 놈입니다.
// 각 숫자는 소수가 아니라 자연수에요. 2와 20의 비교라고 생각하면 됩니다

// 이 정도로 ot를 마치고, 아직 리액트를 본격적으로 배우기전에 하나의 관문이
// 더 남아있어요. HTML 을 배워야됩니다. 