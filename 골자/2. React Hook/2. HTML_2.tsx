// 시맨틱태그는 순전히 개발자를 위한 태그입니다. 
// 개발자의 가독성을 높이기 위한 태그에요

// header	화면의 상단에 위치함 (head와 혼동 주의)
// nav		문서의 네비게이션 항목을 정의. 
//			웹사이트의 상단 탭, 좌측 탭 등에서 누르면 그페이지로 가는 부분을 말한다.
//			카카오톡 켜보면 아랫쪽에 친구목록, 채팅창, 설정, 뉴스, 쇼핑 같은 탭이 있죠
//			그게 네비게이션의 일종입니다.
// section	문서의 구간을 나눌 때 사용.
// article	본문
// aside	광고와 같이 페이지의 내용과는 관계가 적은 내용들
// footer	화면의 하단에 위치하는, 사이트나 문서의 전체적인 정보를 정의.
// 			개인정보처리방침, 약관, 회사이름 등이 들어가는 부분.

// 다음
// 직접 만들어보죠. 화면에 있는 코드는 바디 안에 들어갈 코드입니다
// ul은 리스트형 정보를 나타낼 때 쓰이고요, 내부에 각 리스트 항목을 li 로 표현합니다
// 화면 잠깐 정지하고, 바디 안에 다음 코드를 입력해주세요

<body>
	<header>
		<h1>내 소개</h1>
	</header>
	<nav>
		<ul>
			<li>나는 누구인가</li>
			<li>내 가족</li>
			<li>내 직장</li>
		</ul>
	</nav>
	<section>
		<article>
			나는 조교행님일세
		</article>
	</section>
	<section>
		<article>
			나는 혼자 산다네
		</article>
	</section>
	<section>
		<article>
			나는 조교라네
		</article>
	</section>
	<aside>짜장면 단돈 삼천원</aside>
	<footer>all right reserved</footer>
</body>

// 실습
// 코드를 저는 다음과 같이 입력해보았구요
// 컨트롤에스해서 적용해보았습니다
// 좀 더 자세히 보기 위해 유알엘을 긁어서
// 브라우저로 켜보겠습니다.
// f12 버튼 누르면, 여러분들이 앞으로 자주 키게 될
// 크롬 개발자 도구라는게 나옵니다
// 상단 탭에서 엘러멘트 클릭하고
// 각각을 확인해볼게요
// 커서 올리면 색이 칠해지죠? 어떤 영역인지 알수있는거에요
// 이건 헤더
// 이건 네브
// 이건 섹션
// 이건 어사이드
// 이건 푸터
// 근데 뭔가 좀 잘못된거같아요 
// 아까전에 제가 보여드렸던것은 레이아웃이 다 짜여져 있었는데
// 지금은 그냥 쭉 늘어져서 있잖아요
// 이건 HTML 이 할 일이 아니라
// 나중에 배울 CSS를 배우면 여러분들이 이 태그들을
// 레이아웃 잡아서 예쁘게 만들 수 있어요
// HTML의 다른 태그도 많은데 왜 시맨틱 태그를 먼저 소개했냐면
// 여러분이 시맨틱 태그를 사용하는 습관을 들여놨으면 해서입니다.
// 시멘틱태그는 주석같은 존재입니다. 사실 정확한 설명은 아닌데
// 지금은, 여러분들이 코드 읽기 쉽게 구분해놓는 용도라고 말씀드릴게요
// 쓸 때는 귀찮아도 막상 써놓으면 나중에 편하고 읽기 쉽게 만들어줍니다.

// 피피티

// 가독성이 영 안좋아지는 반대의 예를 들어볼게요
// 오로지 div 태그만 쓰는 경우가 있어요
// div 는 여러분들이 리액트 개발하면서 아마 가장 자주 쓰게 될 태그가 아닐까 싶어요
// 영어단어로는 division 을 의미하는데 쉽게 말하면 '영역'입니다

// 시맨틱 태그로 잘 정리된 내용을 디브 태그만으로 변경해볼게요
// 디브 태그는 주로 클래스네임 속성과 함께 쓰여요
// 클래스네임은 태그의 이름표라고 생각하면 됩니다.
// 디브 뿐만 아니라 모든 태그에 적용 가능한 속성입니다
// 시맨틱 태그에도 달수도 있고, 나중에 리액트 개발하면서 클래스네임 속성 달거에요
// 근데 일단 클래스네임을 쓰지 않고, 그냥 디브만 써서 아까 코드를 읽기 힘들게 바꿔볼게요

<body>
	<div>
		<h1>내 소개</h1>
	</div>
	<div>
		<ul>
			<li>나는 누구인가</li>
			<li>내 가족</li>
			<li>내 직장</li>
		</ul>
	</div>
	<div>
		<div>
			나는 조교행님일세
		</div>
	</div>
	<div>
		<div>
			나는 혼자 산다네
		</div>
	</div>
	<div>
		<div>
			나는 조교라네
		</div>
	</div>
	<div>짜장면 단돈 삼천원</div>
	<div>all right reserved</div>
</body>

// 어때요, 확실히 보기 어려워지지 않았나요?
// 어떤 부분이 위에 있어야 하는지, 네비게이션인지, 밑에 있는 영역인지 읽기 힘들어요
// 그래서 가독성을 위해서라도 시맨틱태그를 꼭 써주길 바랍니다.

// 다음

// 이제부터 주로 쓰일 태그들을 알아볼거에요
// 쪼끔만 알아볼거에요
// HTML 태그를 모두 알려고 하지 마세요
// HTML 태그는 약 120가지 정도 되는데
// 그거 다 알 필요도 없고
// 외우려고해도 까먹습니다
// 필요하면 검색해서 쓰면 됩니다
// 당장 강의에서 쓰는 것들만 알아둡시다

// 다음

<img 
	height="200"
	width=""
	src="https://조교행님.org/빨간모자.jpg" 
	alt="빨간모자"
	title="이것이 빨간모자다"
>


</> // 이건 의미없는데 서브라임 문법때문에 넣어둠

// 이미지 태그는
// 이미지를 삽입할 때 쓰는 태그입니다
// 닫는 태그가 없어요
// 왜? 안에 들어가는 텍스트가 없고
// 이미지 소스를 받아올거거든요
// 여러 애트리뷰트, 즉 속성이 올때는
// 이런식으로 탭 주고
// 엔터를 쳐서 구분하는게 제일 깔끔합니다
// 콤마로 구분하진 않아요
// 그리고 속성 순서는 상관없습니다
// width 다음에 height 나와도 상관없다는말이에요
// 헤이트는 높이를 의미합니다. 픽셀이에요
// 위스는 너비를 의미합니다
// 둘 다 지정할경우 그림이 늘어지니깐
// 보통은 둘 중에 하나만 쓸겁니다
// src는 이미지의 링크입니다
// 소스의 약자입니다
// 지금은 url로 걸어놨는데
// 나중에 리액트 하다보면 퍼블릭 폴더에 있는
// 이미지를 가져와서 쓸수도 있어오
// 저는 인터넷에서 찾은 제가 맘에드는
// 이미지를 찾았구요
// 여러분도 여러분 맘에 드는 이미지를 찾아보세요
// 알트는 혹시나 이미지 소스에 문제가 생겨서
// 이미지를 가져오지 못할 경우에 뜨는
// 텍스트를 의미하구요
// 타이틀은 마우스를 해당 태그에 올렸을 때
// 뜨는 글자입니다. 이미지 태그뿐만 아니라
// 다른 태그에서도 쓸 수 있어요

// 실습

// 저는 이 코드를 네비게이션 밑에 둘게요
// 왜 이미지가 안 뜰까요?
// 조교행님 오알지라는 사이트는 존재하지 않아서
// 대체 택스트가 나온거에요
// 대체 택스트는 어디에 적어놨어요?
// 알트에 적어놨죠
// 저는 red cap 을 쳐서, 빨간모자를 찾아볼게요
// 이미지 맘에드는걸 오른쪽 클릭해서
// 이미지 주소 복사를 눌러줍시다
// 그걸 코드에 집어넣구요
// 짠 하면 빨간모자가 나왔죠

// 마우스 올려보면 짠 이것이 빨간모자다
// 제가 타이틀에 적어놓은 글자가 나오죠

// 피피티

<p>
	<input type="text" onChange="" placeholder="입력하세요">	
</p>





</> // 의미없는 태그

// 다음 태그는 피 태그와 인풋태그입니다
// 인풋태그는 사용자로부터 입력을 받을 때
// 쓰는 태그에요
// 피 태그는 패러그래프의 약자인데
// 단락을 구분할 때 쓰입니다
// 타입 텍스트는, 문자열 입력을 받겠다는 뜻입니다
// 텍스트 말고도 체크박스, 라디오, 넘버, 패스워드 등
// 이런것들이 있어요 나중에 리액트 개발하면서
// 알게 될 것들이고요
// 플레이스홀더는 아무것도 입력하지 않았을 때 나오는
// 디폴트값입니다.
// 온체인지는 입력된 정보가 바뀔 때 작동하는
// 이벤트 핸들러를 말합니다
// 리액트에서 이벤트 핸들러를 쓸때는 문법이 위에 있는거랑은
// 좀 달라요.
// 이벤트 헨들러는 뭘 말하는거지?

// 다음
// 이벤트(event)는 브라우저에서 일어나는 
// 사용자의 행동을 말한다. 
// 클릭, 드래그, 스크롤, 타이핑, 화면 사이즈 줄이기 등
// 여러분이 상상할 수 있는 모든 동작은 이벤트다.
// on- 이 붙으면 이벤트 핸들러(event handler)를 의미한다.
// 이벤트 발생 시 동작하는 함수를 말한다. 

// 지금은 이벤트핸들러를 따로 작성하진 않고 빈 공백으로만
// 둘게요

// 실습
// 바디 태그 안에 있는걸 다 지우고
// 인풋태그만 넣어보죠
// 입력할 수 있는 창이 떳죠?
// 이게 인풋태그입니다

// 피피티

<button onClick="">클릭할거야?</button>
<a href="https://www.google.com">구글로 가자!</a>

// 다음은 버튼태그와 에이태그입니다
// 버튼은 말 그대로 버튼이에요
// 온클릭은 클릭했을 때 실행되는 이벤트핸들러구요
// 이벤트 핸들러는 아까 말했던 인풋이나
// 버튼 말고도 쓸 수 있어요
// 예를들면 사진을 클릭하면 실행할 동작이라던가를
// 자바스크립트 함수로 작성할 수 있다는 말이에요
// 에이태그는 링크입니다.
// 주소는 구글로 되어있죠? 
// href 는 이동할 페이지의 주소입니다

// 실습
// 피 태그 밑에 이 두개를 달아둘게요
// 클릭할거야 클릭하면 아무 동작도 안하죠
// 왜? 이벤트핸들러를 정의하지 않았거든요
// 구글로 가자 클릭해보죠
// 어엇 에러가 떴네요
// 유알엘 그대로 가져다가 새창 띄워서 
// 열고 클릭해보죠
// 구글로 잘 빠지네요
// 이건 아마 코드샌드박스의 보안문제때문인거같은데
// 지금은 신경쓰진 맙시다

// 피피티

// 이것으로 리액트로 점프하기 위한
// 에이치티엠엘은 충분합니다
// 다른 태그들은 필요하면 검색해서
// 더블유쓰리스쿨스나 엠디엔 찾아보면서
// 익히면 됩니다
// 그럼 대체 왜 HTML을 배운것인가
// 이 수업은 리액트 수업이잖아요
// 맞아요 하지만 리액트 전에 HTML을
// 알아야되요. 
// 가지 이유가 있어요
// 첫번째, 이미 설명했지만,
// React 는 어짜피 index.html 로 빌드됩니다.
// 두번째, React 에선 JSX라는, JavaScript 와 HTML을 
// 결합한 문법을 사용하기 때문이에요

// 다음 시간에, 인덱스 닷 에이치티엠엘로 빌드된다는것의
// 의미를 좀 더 자세히 분석해봅시다

// 다음

// 핵심정리 한번 살펴보죠
// React를 배우기 전에 반드시 HTML을 먼저 알아야 한다. 
// HTML 은 태그와 속성으로 이루어져 있다. 
// 태그는 열고 닫아야 한다.
// 속성은 태그를 조작한다.
// React 에선 JSX라는, JavaScript 와 HTML을 결합한 문법을 사용한다.
// React는 index.html 파일의 한 부분일 뿐이다.