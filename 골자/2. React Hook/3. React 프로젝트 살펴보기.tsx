// ppt


// 먼저 노드제이에스와 엔피엠에 대해 알아둘 필요가 있어요
// 노드제이에스는 서버쪽, 그러니깐 브라우저 바깥에서 동작하는
// 자바스크립트입니다
// 원래 자바스크립트는 브라우저에서만 쓰이는 언어였는데
// 노드제이에스가 등장하면서
// 서버에서도 쓰이게되었고
// 메이져 언어가 되었어요
// 여러분의 리액트도
// 노드제이에스로 만들어진겁니다
// 궁금하니깐 한번 해보죠
// 먼저 브라우저에서
// 에프십이 켜가지고
// 크롬개발자도구를 열겠습니다
// 브라우저엔 기본적으로 자바스크립트가 깔려있습니다
// 콘솔로그 안녕 조교행님
// 그러면 잘 떠요
// 이건 브라우저에 이있는 자바스크립트입니다
// 옛날에는, 자바스크립트는 이 바깥을 못 벗어낫어요
// 이제 브라우저 바깥에 있는 자바스크립트인 노드제이에스를
// 실행시켜볼게요
// 터미널 켜서
// 노드 치면
// 노드가 켜졌습니다
// 콘솔로그 안녕조교행님 치면
// 안녕조교행님 잘 뜨죠
// 이더하기 삼 하면 5가 뜨고요
// 이게 노드제이에스구요
// 다음 엔피엠은 뭐냐면
// 노드 패키지 매니저의 약자인데
// 전 세계 노드제이에스로 만든
// 패키지들을 모아놓은 저장소입니다
// 패키지는 라이브러리하고 똑같은말입니다
// 노드제이에스 설치하면 엔피엠은 자동으로 깔립니다

// (npm사이트)
// 이 사이트에요
// react 쳐볼게요
// 리액트가 뜹니다
// 즉, 리액트는 노드제이에스 패키지 중에 하나입니다
// 여러분들이 개발하다가 천재 개발자들이 만든
// 노드제이에스 패키지를 쓸 일이 있을때는
// 엔피엠을 이용합니다

// (다음)
// 이제 인덱스 닷 에이치티엠엘로 빌드된다는 걸 
// 알아봅시다
// 일단 시작전에 알려드리고싶은건데
// 지금부터 말할 내용 겁나게 어려워요
// 여러분들이 모르는 개념도 많이나와요
// 근데 모두 다 이해하려고 하지 말고
// 그냥 들어뒀다가 나중에 여러분만의 프로젝트 끝나고나면
// 한번쯤 다시 와서 들어도 괜찮다고 생각합니다
// 핵심은 이 그림을 이해하는겁니다
// 이 그림은 리액트가 실행되는 과정을 분석한거에요
// 인덱스 닷 티에스엑스라는 파일엔
// 앱 닷 티에스엑스
// 다른 이름으로는 앱 컴포넌트
// 그리고
// 인덱스 닷 에이치티엠엘 안에 있는
// 디브 아이디 루트, 다른 이름으로는 루트 엘리먼트
// 이 두개를 랜더 함수의 파라미터로 주면
// 우리가 보는 리액트 페이지가 나온다는겁니다
// 뭔말인지 모르겠죠

// (다음)
// 코드로 볼게요
// 이 짧은 코드가 인덱스 닷 티에스엑스의 전부입니다
// 이 코드가 핵심이에요
// 디렉토리 위치는 src 안에 있어요
// 여기서 첫번째 라인은 렌더함수를 가져오기위해 쓰였구요
// 세번째라인 앱을 임포트하죠?
// 임포트는 모듈을 안배웠으니깐 잘 모를건데
// 현재 파일 이외의 파일에 접근할 때 쓰는겁니다
// 다른 파일을 집어넣는다고 생각하시면 될거같아요
// 뭘 집어넣는다고요?
// 앱 이라는 걸 집어넣을거에요
// 정확히는 App.tsx 라는걸 집어넣을거에요
// 닷 ts, 닷 js, 닷 tsx 파일은 임포트할때 확장자를 쓰지 않을겁니다
// 자바스크립트와 타입스크립트 파일은 임포트할때는
// 확장자를 쓰지 않는다는거에요
// 계속 보면서 자연스럽게 익히게 될 거에요

// (다음)
// 앱 닷 티에스엑스파일은 
// 우리가 리액트 맨 처음 했을 때 고친 파일입니다
// 이 코드입니다. 이 코드를 집어넣겠다구요
// 어디에? 인덱스 닷 티에스엑스 파일
// 디렉토리 네비게이션보면 화살표 쳐놨죠?
// 앱 닷 티에스엑스를
// 인덱스 닷 티에스엑스에 집어넣는다.

// (다음)
// 그리고 다시 인덱스 닷 티에스엑스입니다. 
// 그럼 첫번째 파라미터는 해결했네요
// 왼쪽 그림 보면
// 앱 닷 티에스엑스 즉 앱 컴포넌트
// 나중에 무슨뜻인지 배울거에요 일단은 앱 태그라고 알아둡시다
// 그걸 여섯번째라인 렌더 함수의 첫번째 파라미터로
// 집어넣었어요
// 다섯번째라인
// 루트엘리먼트라는 콘스트 변수를 선언하고
// 뭘 넣었어요? 아이디가 root 인 걸 집어넣었네요
// 이건 대체 뭘까?
// 이건 인덱스 닷 에이치티엠엘에서 확인할 수 있습니다

// (다음)
// 퍼블릭 폴더에 보면 인덱스 닷 에이치티엠엘이 있는데
// 코드가 쫌 길어요 그 중에 디브아이디 루트라는 부분이 있죠
// 이 부분을 말하는겁니다.

// (다음)
// 다시 돌아와서, 방금 루트 부분을 루트 엘리먼트라는
// 콘스트 변수에 넣었구요
// 그걸 렌더 함수의 두번째 파라미터로 넣습니다
// 그림으로 보면?
// 인덱스 닷 에이치티엠엘의
// 한 부분인 디브 아이디 루트
// 즉 루트엘리먼트를 
// 렌더 함수의 두번째 파라미터로 넣습니다.
// 왼쪽 도식에서 자세히 설명되어있죠
// 그러면 어떤 결과가 나온다구요?

// (다음)
// 다음과 같은 화면이 나온다구요
// 렌더, 화면을 그린다는 뜻입니다
// 화면을 그리는 함수인 렌더를 
// 이용해서 이렇게 화면을 표현한다구요
// 이제 빌드를 하면 어떤 결과가 나올까 한번 상식선에서 알아봅시다
// 코드샌드박스에선 보여줄수 없고
// 제가 터미널켜서 보여드릴게요
// 여러분은 따라치지 마세요

// (vscode)
// 브이에스코드라고 나중에 여러분들이 쓰게 될 에디터를 켜서
// 보여드리면 
// 이 테스트 폴더는 제 리액트 타입스크립트를
// 초기 구성한 디렉토리입니다
// 여기엔 빌드 디렉터리가 없어요 왜?
// 빌드한적이 없거든요
// 빌드해보겠습니다
// 엔피엠 런 빌드
// 쳐보면 빌드가 시작되고
// 빌드가 끝나고
// 보면 
// 여기 이 빌드 디렉토리가 방금 빌드가 마친 파일들이 담긴겁니다
// 브라우저는 이것만 알아들어요
// 제가 빌드 빌드 빌드 계속 말했는데
// 빌드에 대한 설명을 한번도 한적 없어요
// 여러분이 작업한 코드를
// 브라우저가 알아듣는 파일로 바꾸는것을 빌드라고합니다
// 이 빌드 과정을 안 거치면
// 우리가 아무리 리액트 파일을 잘 짜도 소용없어요
// 이 빌드 안에 있는것들만 서버에서 쓸모있어요
// 자세히보면 인덱스 닷 에이치티엠엘이 있어요
// 스태틱 켜보면 자바스크립트 파일들이 있고
// 단 하나의 에이치티엠엘만 있어요
// 열어보면 굉장히 못생겼기때문에
// 좀 예쁘게 바꿔주겠습니다.
// 알트 시프트 에프
// 오오 뭔소린지 모르겠죠
// 중요한건 우리가 작업한것들이
// 하나의 인덱스닷에이치티엠엘로 나온다는겁니다
// 굉장히 어려웠는데, 이걸 좀 설명하고싶었어요
// 이해 못해도 괜찮습니다. 여러분들의 프로젝트가
// 어떤식으로 인덱스닷에이치티엠엘로 바뀌는지를 설명해주고 싶었어요
// 10프로만 이해해도 괜찮습니다.

// (코드샌드박스)
// 이제 다른 구조도 좀 파악해봅시다.
// 퍼블릭 디렉터리는 여러분이 개발하면서 쓸
// 이미지, 파비콘, 샘플제이슨 등을 저장해두는 곳입니다
// 파비콘은 페이보릿 아이콘의 줄임말인데 웹페이지 아이콘이에요
// 켜서 보여드리면...
// (브라우저 켜서 보여줌)
// 이 부분을 말해요
// 그리고 이 안에 index.html 이 있어요
// 이 부분은
// 파비콘을 등록하거나
// 웹페이지 타이틀을 바꿀때 건드릴거에요
// 그 이외에는 크게 건드릴일이 여러분들 수준에선 없어요
// 에스알씨
// 이건 소스코드의 줄임말입니다.
// 여러분이 코딩할 파일들이 들어가요
// 앱 닷 티에스액스
// 본격적인 리액트 개발의 시작이 될 파일입니다
// 이 부분부터 코딩하게될거에요
// 보다시피 수업 맨 처음 시간에 코딩한 파일이에요
// 인덱스 닷 티에스엑스
// 아까전에 설명했던 파일입니다. 렌더 함수를 쓰기위해
// 존재해요. 여러분은 건드릴 일이 없을거에요
// 스타일스닷씨에스에스
// 웹 디자인할때 쓰는 씨에스에스 파일입니다
// 이번 수업에선 다루지 않습니다
// 패키지 닷 제이슨
// 우리 프로젝트에 대한 정보를 담은 파일이구요
// 티에스콘피그 제이슨
// 이건 타입스크립트 설정파일입니다. 
// 이 파일이 있어야 타입스크립트가 자바스크립트로
// 컴파일 됩니다
// 컴파일, 쉽게 말하면 번역입니다
// 브라우저는 자바스크립트만 알아듣기 때문에
// 번역하는 과정이 꼭 필요해요
// 우리의 리액트 코드들도 결국에
// 자바스크립트로 컴파일될겁니다

// 이 중에서 심도깊게 살펴봐야될건 
// 패키지 닷 제이슨파일입니다
// 우리 프로젝트의 정보를 담은 파일입니다
// 분석해보도록 하죠

// 피피티

// 프로젝트 설명부분은 프로젝트 시작때에
// 여러분들이 적절하게 바꿔주면 됩니다
// 이름, 여러분 프로젝트의 버전, 설명, 키워드가
// 나와있구요
// 스크립트 명령어 부분 보죠
// 엔피엠 명령어입니다
// 콘솔에서 쓰는 명령어인데
// 스타트와 빌드는
// 나중에 브이에스코드로 작업하면 많이 쓰게 될 겁니다
// 빌드는 아까전에 보여드렸고
// 스타트는 안해봤는데 코드샌드박스 키면 이게 스타트 된 페이지입니다
// 직접 보여드릴까요
// 터미널 켜서 아까 제 컴퓨터에있는
// 리액트 타입스크립트 테스트 디렉토리에서
// 엔피엠 스타트 하면
// 로컬호스트 삼천번 페이지가 뜨고
// 제가 뭔가를 바꿔서 치면
// 그대로 바뀌어요
// 코드샌드박스랑 똑같죠? 코드샌드박스는 스타트 된 상태로
// 프로젝트를 실행시킵니다
// 노드제이에스 서버를 실행시키는겁니다

// 여기 보시면 디펜던시라고 적혀진 부분이 있는데
// 이건 여러분들이 쓰는 패키지 리스트에요
// 엔피엠에서 다운받은 패키지입니다
// 패키지는 라이브러리랑 같다고 보시면 될거같아요
// 근데 이 디펜던시는 무슨뜻이지? 
// 한국어로 의존성이라고도 하는데 좀 더 자세히 알아봅시다

// 다음
// 중국집 떠올려봅시다. 
// 중국집만 떡하니 있으면 장사가 가능할까요?
// 주방장
// 배달원
// 정육점
// 건물관리인
// 채소가게
// 세금관리해주는 세무사
// 동네 중국집만 해도
// 엄청나게 많은 관계가 엉켜있어요
// 사장이 혼자 청경채 키우고
// 세금관리하고
// 주방에서 요리하고
// 야채가게도 운영하고
// 배달도가고 서빙도하고
// 정육점도 운영할수는 없어요
// 그러면 금방 망할거에요
// 우리 프로젝트도 마찬가지입니다
// 자바스크립트 하나만으로 개발하긴 정말 힘들어요
// 우린 남이 쓴 코드를 가져다 써야되는데
// 디펜던시는 이 프로젝트가 정상작동하기위해
// 필요한 패키지 목록입니다
// 만약 중국집 사장이 바뀐다
// 그러면 어느 정육점과 거래했는지
// 어느 채소가게와 거래했는지
// 배달원 월급은 얼마나 줬고
// 어떤 세무사에 세금관리를 맡겼는지
// 가게 월세는 얼마나줬는지
// 이런 걸 상세하게 적어놓으면 좋겠죠
// 다른 사람이 이 프로젝트 코드를 다운받으면
// 적어도 이게 있어야 실행된다고 상세하게 적어놓은 거에요
// 이 문서만 있으면, 
// 우리가 패키지 전체를 일일히 줄 필요가 없어요 
// 중국집 넘겨준다고 여기 있는 모든 걸 툭 떼가지고
// 부산에서 서울로 옮기진 않잔아요
// 디펜던시 목록만 있으면 우리가 가져다 쓴
// 패키지를 압축해서 올릴 필요 없이
// 이거 가져다 쓰면 된다고 적어놨으니깐
// 그걸 엔피엠에서 다운받으면 되는거에요
// 생각보다 패키지 용량이 어마어마하게 커요
// 그리고, 우리 프로젝트뿐만아니리
// 리액트는 리액트만의 디펜던시를 또 따로
// 가지고있어요. 그래서 리액트 깔면 오만게 다 깔려요
// 몇백개 되요
// 근데 왜 패키지 리스트라고 이름짓지 않고 
// 디펜던시라고 이름지었지?
// 각각의 패키지는 다른 패키지에 의존하고있기 때문이에요
// 서로 의존하고 있다가 핵심입니다. 
// 제가 예전에 버전 얘기한적있는데
// 어떤 패키지는 버전 포 쓰고
// 어떤 패키지는 버전 파이브 쓰면 작동안된다그랬죠?
// 그래서 디펜던시에는 버전까지 적어놓습니다
// 코드를 볼까요

// 피피티 이전장 
// 보시면 버전까지 전부 적혀있는걸 볼 수 있죠
// 이 프로젝트는
// 리액트 17.0.2, react-dom 17.0.2, 리액트 스크립트 4.0.0에 의존하고 있어요
// 이 버전이 바뀌면 프로젝트가 작동 안될수도 있다는 뜻입니다.
// 이 패키지 리스트에, 이 버전에 이 프로젝트가 '의존'한다는 말입니다
// 그래서 디펜던시, 의존성이라는 말을 사용합니다

// 그러면 데브 디펜던시는 뭐가 다른걸까?
// 이건 개발 및 테스트용 패키지입니다
// 실제 웹으로 배포할때, deploy 라고도 하는데
// 그때는 필요없는 패키지에요
// 빌드 이후엔 필요없는 패키지라고 생각하면 되요
// 타입스크립트 관련 패키지들이 적혀있는데
// 타입스크립트는 빌드할땐 필요한데 빌드하고나면
// 자바스크립트이니깐 필요없는거에요
// 그래서 디펜던시가 아니라
// 데브 디펜던시에 들어가있는겁니다

// 그럼 우리가 무슨 패키지 추가할때마다
// 여기에 일일히 다 기록해야될까?
// 그렇진 않아요
// 패키지를 설치하면 알아서 기록됩니다
// 뭘 추가한다고 이 문서를 건드리는게 아니라
// 패키지를 설치하면 이 문서에 자동으로 추가가 됩니다

// 여기까지 프로젝트 설명을 마치겠습니다
// 아마 겁나게 어렵지 않았나 생각드는데
// 이 지식은 나중에 필요할때가 있을거에요
// 지금 교양 수준으로 좀 들어놨다가
// 여러분만의 프로젝트 한번 해보고 다시 와서 강의를 들어보면
// 도움 될 정보라고 생각듭니다
// 이제 본격적인 리액트 문법을 알아보도록 하죠