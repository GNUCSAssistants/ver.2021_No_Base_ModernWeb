(피피티)
우리가 다루는 포스트그래스큐엘은
SQL을 사용하는 관계형 데이터베이스입니다.
여기서 관계란 그림과 같이 여러 테이블의 관계로 이루어져 있다는
뜻입니다.
우리가 배운 포스트그래스큐엘, 그리고 가벼워서 많이 사용되는 에스큐엘라이트,
한때 오픈소스 최강 마이에스큐엘, 마이에스큐엘에서 독립해 나온 마리아디비,
업계 1위이자 엄청 비싼 오라클, 그리고 마이크로소프트의 엠에스에스큐엘이 
시장에서 자리잡은 여섯개 알디비입니다.

알디비가 아닌것도 있어요
에스큐엘을 안 쓰는 노 에스큐엘 디비들
가장 점유율이 높은 문서형 데이터베이스인 몽고디비
그리고 몽고디비보다 속도가 빠르다고 알고있는 카산드라가 있어요
이 외에 페이스북도 그래프로 이루어진 디비를 사용한다고 알고있구요
어쨌든 알디비, 즉 에스큐엘을 쓰는 데이터베이스는 
앞으로 당분간 왕좌에서 내려오지 않을 겁니다
업계 표준이에요
왜 이렇게 테이블을 나눠놨을까요
하나의 테이블만 있으면 엄청 편할텐데요
이것은 데이터의 중복, 그리고 널값이라고 부르는 공백값과 관련이 있습니다

(다음)
이 그림을 잘 보죠
게시판입니다. 아이디가 필요할것이고
글에 대한 데이터
댓글에 대한 데이터가 필요한데
이 모든걸 하나로 만들었어요
잘 보시면 중복이 발생합니다.
빨간색이 중복입니다.
코린이님은 하나의 글에 두 개의 댓글을 썼어요
자기가 쓴 글에 하나 들어갔고
그리고 자기가 쓴 글에 댓글을 한번 더 썻어요
그래서 중복이 발생한겁니다.
수지니 그리고 조교행님은
이미 한번의 글을 썼는데 다른 글에 댓글을 달아서
중복이 발생했어요
그리고 다른 문제로, 공백입니다.
첫줄처럼 글만 쓸 경우엔 댓글에 대한 정보가 필요없는데도
하나의 테이블만 쓰니깐 공백, 즉 널값이 발생했고
나머지는 글은 안 쓰고 댓글만 쓰니깐
글에 대한 데이터가 없죠? 그래서 널값이 발생한겁니다.
누가 봐도 비효율적입니다. 
지금 얼마 안되는 데이터도 이런데
쓰여진글만 몇천개 댓글만 몇만개 서비스를 운영한다하면
데이터베이스 자원을 낭비하는거에요
데이터베이스 자원은 한정되어있습니다
막 쓸수가 없어요
그래서 이런 중복문제와 널값 문제를 해결하고
효율적으로 데이터베이스를 쓰기 위해
테이블을 나누는겁니다.

(다음)
이런식으로, 세 개의 테이블로 나누어볼게요
글 테이블 사용자 테이블 댓글 테이블
그러면 글 테이블은 글만 담당하고
사용자는 사용자만
댓글은 댓글만 담당하겠죠?
그런데, 글 테이블의 경우엔 누가 썻는지 알아야되기때문에
사용자 아이디가 필요하구요
댓글 테이블도 누가썻는지 알아야되고, 어떤 글에 달린 댓글인지 알아야되기때문에
댓글에 해당하는 글 아이디와 사용자아이디가 필요한겁니다.
여기서, 원래 테이블을 식별하는 용도로 사용된 키는 프라이머리키
줄여서 피케이라고도 하고 한국어로는 주키라고 합니다
프라이머리키는 우리가 포스트그레스큐엘 테이블 크리에이트할때 
만들어봤죠?
그리고 내 테이블이 아니라 다른 테이블에 있는 피케이를
포린 키, 줄여서 에프케이, 한국어로는 외래키라고 부릅니다.
댓글 테이블의 주키는?
각 댓글의 아이디죠? 일이삼사오륙칠팔구십, 자동 증가하는 시퀀스고
그 댓글을 누가 썻는지 알아야하죠?
그래서 글 테이블의 피케이가 필요한겁니다. 이게 댓글테이블의 첫번째 에프케이
그리고 누가 댓글을 썻는지 알아야되죠? 
그래서 사용자 테이블의 피케이인 아이디가 필요한겁니다.
이게 댓글테이블의 두번째 에프케이죠
어떤 테이블에 에프케이가 있다는 뜻은
다른 테이블과 관계가 성립한다는 뜻입니다
왜? 에프케이를 통해 다른 테이블의 정보에 접근할 수 있으니까요
댓글테이블만 보면
댓글아이디 일번은 에프케이 두개가 없으면 어떤 글에 썻는지 몰라요
근데 에프케이가 있으니깐 무슨글인지 알 수 있죠
일 이라고 쓰여지니깐 일번을 따라가서
글테이블에 가서 일번을 읽어보면
무슨 글인지 알 수 있잖아요. 조교행님의 첫글 흐흐 였네요
그래서 관계형 데이터베이스입니다
관계형 데이터베이스의 핵심은
에프케이, 포린키입니다.
하나의 테이블만 가지고 관리하는게 아니라
이런 식으로 테이블을 나눠놓으니깐
데이터가 몇천개 몇만개 늘어나면
중복이 발생하지 않고, 널값도 없으니깐
데이터베이스의 자원을 훨씬 효율적으로 관리할 수 있고
데이터베이스를 다루기도 훨씬 편리합니다.

(다음)
이제 우리의 현실의 문제를 관계형데이터베이스로, 알디비로 설계해보겠습니다.
사실 이건 굉장히 어려운 문제입니다.
이것만 제대로 연구해도 논문을 쓸 수 있지 않을까 싶어요
왜? 현실의 추상적인 문제를 표로, 즉 테이블로, 그것도 여러개로 나눠서
바꾼다는게 쉬운일일까요?
굉장히 어려운 일입니다.
그래서 방법론이 존재합니다.

(다음)
지금부턴 개발하는 과정을 쭉 따라갑니다.
여러분의 개발에서 가장 먼저 하는일 뭐죠?
맨 처믐 할 일은 유아이를 먼저 짜는겁니다.
유아이는 유저 인터페이스, 그러니깐 여러분의 웹앱 화면이
어떤 식으로 돌아갈지 상상해보고 그려보는겁니다.
왜? 현실의 문제니깐, 현실이 뭔지를 파악하는거죠
배달 앱을 만든다고 치면
로그인 할건지
로그인하면 메인화면은 뭔지
어떤 버튼들을 둘 것이고
버튼에 들어가면 어떤것이 뜨고
누르면 무엇을 선택할 수 있고
가게정보가 뜰것이고 메뉴도 있고
주문하기 누르면 가게로 주문정보가 전송되고
리뷰에 대한 정보도 있고
엄청나게 많다구요
이런 것들을
먼저 눈에 보이게 그리는겁니다.
회사에선 주문제작을 요청한 고객, 그리고 디자이너와 함께
기획서와 유아이를 만드는 일이 여기에 해당되겠죠

그리고 두번째로 할 일, 이알디를 설계한다고 되어있는데
우리의 유아이를 보고 어떤 테이블이 필요한지 파악해보고
알디비 형식에 맞춰서 테이블을 나누고, 관계를 설정하는 일이 필요해요
이알디는 디비의 꽃입니다. 디비 설계도에요. 우리가 디비 설계만 잘해도
디비의 반 이상은 먹고들어가는거에요
설계를 제대로 하지 않으면 나중에 계속 바꿔야됩니다.
반드시, 원래 목적대로 만들고있는지 검토하고
혹시 빼먹은게 없는지, 잘 작동하는지 충분히 검토해야됩니다

그리고 그 이알디를 에스큐엘 문법으로 바꾸어서 실제 테이블로 바꾸는건
어려운 일도 아닙니다. 그냥 문법에 맞추어서 작성하면 되요

(다음)
그래서 우린 유아이 먼저 작성해보도록 하겠습니다
지금부턴 코딩시간 아니고 여러분의 상상력을 발휘해보는 시간입니다.
생각을 문서화하고, 그려보고, 가상으로 작동시켜 볼겁니다.
다음시간에 보도록 하죠.